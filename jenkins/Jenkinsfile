pipeline {
    agent any
    
    environment {
        // Application Configuration - EC2 Public IP
        WEB_APP_URL = 'http://13.51.201.77:5000'
        BASE_URL = 'http://13.51.201.77:5000'
        
        // Test Configuration
        TEST_DIR = 'selenium-tests'
        SCREENSHOTS_DIR = 'screenshots'
        REPORTS_DIR = 'reports'
        
        // Docker Configuration
        DOCKER_IMAGE = 'selenium-test-runner'
        DOCKER_CONTAINER = 'selenium-tests'
        
        // Email Configuration
        EMAIL_SENDER = 'shazminnasir481@gmail.com'
        EMAIL_RECIPIENTS = 'qasimalik@gmail.com'
        EMAIL_SUBJECT = 'TechFlow - DevOps Assignment 3 - Test Results'
        
        // Git Configuration
        GIT_REPO = 'https://github.com/shazminnasir67/tech-flow.git'
        GIT_BRANCH = 'main'
    }
    
    options {
        // Pipeline options
        timeout(time: 30, unit: 'MINUTES')
        timestamps()
        
        // Build options
        buildDiscarder(logRotator(numToKeepStr: '10'))
        disableConcurrentBuilds()
    }
    
    triggers {
        // GitHub webhook trigger
        GenericTrigger(
            genericVariables: [
                [key: 'ref', value: '$.ref'],
                [key: 'repository', value: '$.repository.name'],
                [key: 'pusher', value: '$.pusher.name'],
                [key: 'commit_id', value: '$.head_commit.id'],
                [key: 'commit_message', value: '$.head_commit.message']
            ],
            causeString: 'Triggered by GitHub push',
            token: 'devops-assignment-3-webhook-token',
            regexpFilterText: '$ref',
            regexpFilterExpression: 'refs/heads/main'
        )
    }
    
    stages {
        stage('Checkout') {
            steps {
                script {
                    echo "Starting DevOps Assignment 3 CI/CD Pipeline - Updated for ChromeDriver fix"
                    echo "Build Number: ${BUILD_NUMBER}"
                    echo "Build URL: ${BUILD_URL}"
                }
                
                // Checkout code from GitHub
                checkout([
                    $class: 'GitSCM',
                    branches: [[name: "*/${GIT_BRANCH}"]],
                    doGenerateSubmoduleConfigurations: false,
                    extensions: [
                        [$class: 'CleanBeforeCheckout'],
                        [$class: 'CleanCheckout'],
                        [$class: 'SubmoduleOption', disableSubmodules: false, recursiveSubmodules: true, trackingSubmodules: false]
                    ],
                    submoduleCfg: [],
                    userRemoteConfigs: [[
                        url: "${GIT_REPO}",
                        credentialsId: 'github-credentials'
                    ]]
                ])
                
                script {
                    echo "Code checkout completed"
                    echo "Repository: ${GIT_REPO}"
                    echo "Branch: ${GIT_BRANCH}"
                    echo "Commit: ${env.GIT_COMMIT}"
                }
            }
        }
        
        stage('Environment Setup') {
            steps {
                script {
                    echo "Setting up test environment..."
                    
                    // Create necessary directories
                    sh '''
                        mkdir -p ${SCREENSHOTS_DIR}
                        mkdir -p ${REPORTS_DIR}
                        mkdir -p ${WORKSPACE}/logs
                    '''
                    
                    // Check Python and pip versions
                    sh '''
                        python3 --version
                        python3 -m pip --version
                    '''
                    
                    // Create virtual environment for global packages
                    sh '''
                        python3 -m venv ${WORKSPACE}/venv
                        . ${WORKSPACE}/venv/bin/activate
                        python3 -m pip install --upgrade pip
                        python3 -m pip install selenium webdriver-manager pytest
                    '''
                }
            }
        }
        
        stage('Web Application Setup') {
            steps {
                script {
                    echo "Setting up Flask web application..."
                    
                    dir('web-app') {
                        // Install Flask dependencies in virtual environment
                        sh '''
                            . ${WORKSPACE}/venv/bin/activate
                            python3 -m pip install -r requirements.txt
                        '''
                        
                        // Check if Flask app is already running and kill it
                        sh '''
                            if [ -f ../web-app.pid ]; then
                                echo "Killing existing Flask app process..."
                                kill $(cat ../web-app.pid) 2>/dev/null || true
                                rm ../web-app.pid
                            fi
                        '''
                        
                        // Start web application in background with proper binding
                        sh '''
                            . ${WORKSPACE}/venv/bin/activate
                            echo "Starting Flask application on 0.0.0.0:5000..."
                            export FLASK_HOST=0.0.0.0
                            export FLASK_PORT=5000
                            python3 app.py > ../logs/web-app.log 2>&1 &
                            echo $! > ../web-app.pid
                            echo "Flask app started with PID: $(cat ../web-app.pid)"
                        '''
                        
                        // Wait for application to start with retries
                        sh '''
                            echo "Waiting for Flask application to start on EC2..."
                            for i in {1..30}; do
                                echo "Attempt $i: Checking if Flask app is running..."
                                if curl -f http://13.51.201.77:5000/api/health > /dev/null 2>&1; then
                                    echo "Flask application is running successfully on EC2!"
                                    curl http://13.51.201.77:5000/api/health
                                    break
                                fi
                                if [ $i -eq 30 ]; then
                                    echo "Flask application failed to start after 30 attempts"
                                    echo "Web app log contents:"
                                    cat ../logs/web-app.log
                                    exit 1
                                fi
                                sleep 2
                            done
                        '''
                        
                        // Verify the process is still running
                        sh '''
                            if [ -f ../web-app.pid ]; then
                                PID=$(cat ../web-app.pid)
                                if ps -p $PID > /dev/null; then
                                    echo "Flask app process $PID is still running"
                                else
                                    echo "Flask app process $PID is not running"
                                    echo "Web app log contents:"
                                    cat ../logs/web-app.log
                                    exit 1
                                fi
                            else
                                echo "No PID file found"
                                exit 1
                            fi
                        '''
                        
                        echo "Web application started successfully"
                    }
                }
            }
        }
        
        stage('Test Dependencies') {
            steps {
                script {
                    echo "Installing test dependencies..."
                    
                    dir('selenium-tests') {
                        // Install test dependencies in virtual environment
                        sh '''
                            . ${WORKSPACE}/venv/bin/activate
                            python3 -m pip install -r requirements.txt
                        '''
                        
                        // Verify Selenium installation
                        sh '''
                            . ${WORKSPACE}/venv/bin/activate
                            python3 -c "import selenium; print(f'Selenium version: {selenium.__version__}')"
                        '''
                    }
                }
            }
        }
        
        stage('Run Selenium Tests') {
            steps {
                script {
                    echo "Executing Selenium test suite..."
                    
                    dir('selenium-tests') {
                        // Set environment variables for tests
                        withEnv([
                            "BASE_URL=${WEB_APP_URL}",
                            "HEADLESS=true",
                            "SCREENSHOTS_DIR=${WORKSPACE}/${SCREENSHOTS_DIR}",
                            "REPORTS_DIR=${WORKSPACE}/${REPORTS_DIR}"
                        ]) {
                            // Run test suite
                            sh '''
                                . ${WORKSPACE}/venv/bin/activate
                                python3 test_suite.py
                            '''
                        }
                    }
                }
            }
            
            post {
                always {
                    script {
                        // Archive test artifacts
                        archiveArtifacts(
                            artifacts: "${SCREENSHOTS_DIR}/**/*, ${REPORTS_DIR}/**/*, logs/**/*, selenium-tests/test_results.json",
                            allowEmptyArchive: true
                        )
                    }
                }
            }
        }
        
        stage('Cleanup') {
            steps {
                script {
                    echo "Cleaning up test environment (keeping web app running)..."
                    
                    // Keep web application running for production access
                    echo "Web application will remain running at http://13.51.201.77:5000"
                    echo "You can access the app for manual testing and demonstration"
                    
                    // Clean up Docker containers only
                    sh '''
                        echo "Cleaning up Docker containers..."
                        docker stop ${DOCKER_CONTAINER} 2>/dev/null || true
                        docker rm ${DOCKER_CONTAINER} 2>/dev/null || true
                    '''
                    
                    // Clean up temporary files only
                    sh '''
                        echo "Cleaning up temporary files..."
                        rm -rf selenium-tests/test-venv 2>/dev/null || true
                        rm -rf web-app/venv 2>/dev/null || true
                    '''
                    
                    echo "Cleanup completed - Web app still running on EC2"
                }
            }
        }
    }
    
    post {
        always {
            script {
                // Keep Flask app running for production access
                echo "Post-build: Keeping Flask app running on EC2..."
                echo "Application accessible at: http://13.51.201.77:5000"
                
                // Only archive artifacts
                archiveArtifacts(
                    artifacts: "${SCREENSHOTS_DIR}/**/*, ${REPORTS_DIR}/**/*, logs/**/*",
                    allowEmptyArchive: true
                )
                
                // Record build information
                currentBuild.description = "DevOps Assignment 3 - Build ${BUILD_NUMBER} - App Running on EC2"
                
                echo "Pipeline execution completed - Web app remains accessible"
            }
        }
        
        success {
            script {
                echo "Pipeline completed successfully!"
                
                // Send success notification from Shazmin to Malik Qasim
                emailext(
                    subject: "${EMAIL_SUBJECT} - SUCCESS - Live on EC2",
                    body: """
                    <h2>DevOps Assignment 3 - Test Suite PASSED ✅</h2>
                    <p><strong>From:</strong> Shazmin Nasir (${EMAIL_SENDER})</p>
                    <p><strong>To:</strong> Malik Qasim (${EMAIL_RECIPIENTS})</p>
                    <p><strong>Build Number:</strong> ${BUILD_NUMBER}</p>
                    <p><strong>Build URL:</strong> <a href="${BUILD_URL}">${BUILD_URL}</a></p>
                    <p><strong>Duration:</strong> ${currentBuild.durationString}</p>
                    <p><strong>Test Results:</strong> All tests passed successfully</p>
                    <p><strong>🌐 Live Application:</strong> <a href="http://13.51.201.77:5000">http://13.51.201.77:5000</a></p>
                    <p><strong>API Health:</strong> <a href="http://13.51.201.77:5000/api/health">http://13.51.201.77:5000/api/health</a></p>
                    <p><strong>Screenshots:</strong> Available in build artifacts</p>
                    <p><strong>Reports:</strong> Available in build artifacts</p>
                    <p><em>Note: Application is running live on EC2 and accessible for testing!</em></p>
                    """,
                    to: "${EMAIL_RECIPIENTS}",
                    from: "${EMAIL_SENDER}",
                    mimeType: 'text/html'
                )
            }
        }
        
        failure {
            script {
                echo "Pipeline failed!"
                
                
            }
        }
        
        
    }
} 
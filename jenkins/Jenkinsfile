pipeline {
    agent any
    
    environment {
        // Application Configuration
        WEB_APP_URL = 'http://localhost:5000'
        BASE_URL = 'http://localhost:5000'
        
        // Test Configuration
        TEST_DIR = 'selenium-tests'
        SCREENSHOTS_DIR = 'screenshots'
        REPORTS_DIR = 'reports'
        
        // Docker Configuration
        DOCKER_IMAGE = 'selenium-test-runner'
        DOCKER_CONTAINER = 'selenium-tests'
        
        // Email Configuration
        EMAIL_RECIPIENTS = 'shazminnasir481@gmail.com, qasimalik@gmail.com'
        EMAIL_SUBJECT = 'TechFlow - DevOps Assignment 3 - Test Results'
        
        // Git Configuration
        GIT_REPO = 'https://github.com/shazminnasir67/tech-flow.git'
        GIT_BRANCH = 'main'
    }
    
    options {
        // Pipeline options
        timeout(time: 30, unit: 'MINUTES')
        timestamps()
        
        // Build options
        buildDiscarder(logRotator(numToKeepStr: '10'))
        disableConcurrentBuilds()
    }
    
    triggers {
        // GitHub webhook trigger
        GenericTrigger(
            genericVariables: [
                [key: 'ref', value: '$.ref'],
                [key: 'repository', value: '$.repository.name'],
                [key: 'pusher', value: '$.pusher.name'],
                [key: 'commit_id', value: '$.head_commit.id'],
                [key: 'commit_message', value: '$.head_commit.message']
            ],
            causeString: 'Triggered by GitHub push',
            token: 'devops-assignment-3-webhook-token',
            regexpFilterText: '$ref',
            regexpFilterExpression: 'refs/heads/main'
        )
    }
    
    stages {
        stage('Checkout') {
            steps {
                script {
                    echo "Starting DevOps Assignment 3 CI/CD Pipeline"
                    echo "Build Number: ${BUILD_NUMBER}"
                    echo "Build URL: ${BUILD_URL}"
                }
                
                // Checkout code from GitHub
                checkout([
                    $class: 'GitSCM',
                    branches: [[name: "*/${GIT_BRANCH}"]],
                    doGenerateSubmoduleConfigurations: false,
                    extensions: [
                        [$class: 'CleanBeforeCheckout'],
                        [$class: 'CleanCheckout'],
                        [$class: 'SubmoduleOption', disableSubmodules: false, recursiveSubmodules: true, trackingSubmodules: false]
                    ],
                    submoduleCfg: [],
                    userRemoteConfigs: [[
                        url: "${GIT_REPO}",
                        credentialsId: 'github-credentials'
                    ]]
                ])
                
                script {
                    echo "Code checkout completed"
                    echo "Repository: ${GIT_REPO}"
                    echo "Branch: ${GIT_BRANCH}"
                    echo "Commit: ${env.GIT_COMMIT}"
                }
            }
        }
        
        stage('Environment Setup') {
            steps {
                script {
                    echo "Setting up test environment..."
                    
                    // Create necessary directories
                    sh '''
                        mkdir -p ${SCREENSHOTS_DIR}
                        mkdir -p ${REPORTS_DIR}
                        mkdir -p ${WORKSPACE}/logs
                    '''
                    
                    // Check Python and pip versions
                    sh '''
                        python3 --version
                        python3 -m pip --version
                    '''
                    
                    // Create virtual environment for global packages
                    sh '''
                        python3 -m venv ${WORKSPACE}/venv
                        . ${WORKSPACE}/venv/bin/activate
                        python3 -m pip install --upgrade pip
                        python3 -m pip install selenium webdriver-manager pytest
                    '''
                }
            }
        }
        
        stage('Web Application Setup') {
            steps {
                script {
                    echo "Setting up Flask web application..."
                    
                    dir('web-app') {
                        // Install Flask dependencies in virtual environment
                        sh '''
                            . ${WORKSPACE}/venv/bin/activate
                            python3 -m pip install -r requirements.txt
                        '''
                        
                        // Check if Flask app is already running and kill it
                        sh '''
                            if [ -f ../web-app.pid ]; then
                                echo "Killing existing Flask app process..."
                                kill $(cat ../web-app.pid) 2>/dev/null || true
                                rm ../web-app.pid
                            fi
                        '''
                        
                        // Start web application in background with better logging
                        sh '''
                            . ${WORKSPACE}/venv/bin/activate
                            echo "Starting Flask application..."
                            python3 app.py > ../logs/web-app.log 2>&1 &
                            echo $! > ../web-app.pid
                            echo "Flask app started with PID: $(cat ../web-app.pid)"
                        '''
                        
                        // Wait for application to start with retries
                        sh '''
                            echo "Waiting for Flask application to start..."
                            for i in {1..30}; do
                                echo "Attempt $i: Checking if Flask app is running..."
                                if curl -f http://localhost:5000/api/health > /dev/null 2>&1; then
                                    echo "Flask application is running successfully!"
                                    curl http://localhost:5000/api/health
                                    break
                                fi
                                if [ $i -eq 30 ]; then
                                    echo "Flask application failed to start after 30 attempts"
                                    echo "Web app log contents:"
                                    cat ../logs/web-app.log
                                    exit 1
                                fi
                                sleep 2
                            done
                        '''
                        
                        // Verify the process is still running
                        sh '''
                            if [ -f ../web-app.pid ]; then
                                PID=$(cat ../web-app.pid)
                                if ps -p $PID > /dev/null; then
                                    echo "Flask app process $PID is still running"
                                else
                                    echo "Flask app process $PID is not running"
                                    echo "Web app log contents:"
                                    cat ../logs/web-app.log
                                    exit 1
                                fi
                            else
                                echo "No PID file found"
                                exit 1
                            fi
                        '''
                        
                        echo "Web application started successfully"
                    }
                }
            }
        }
        
        stage('Test Dependencies') {
            steps {
                script {
                    echo "Installing test dependencies..."
                    
                    dir('selenium-tests') {
                        // Install test dependencies in virtual environment
                        sh '''
                            . ${WORKSPACE}/venv/bin/activate
                            python3 -m pip install -r requirements.txt
                        '''
                        
                        // Verify Selenium installation
                        sh '''
                            . ${WORKSPACE}/venv/bin/activate
                            python3 -c "import selenium; print(f'Selenium version: {selenium.__version__}')"
                        '''
                    }
                }
            }
        }
        
        stage('Connection Test') {
            steps {
                script {
                    echo "Testing connection to web application..."
                    
                    dir('selenium-tests') {
                        // Test connection to web application
                        sh '''
                            . ${WORKSPACE}/venv/bin/activate
                            python3 test_connection.py
                        '''
                    }
                }
            }
        }
        
        stage('Debug Test') {
            steps {
                script {
                    echo "Running debug test to identify issues..."
                    
                    dir('selenium-tests') {
                        // Run debug test with detailed output
                        sh '''
                            . ${WORKSPACE}/venv/bin/activate
                            python3 debug_test.py
                        '''
                    }
                }
            }
        }
        
        stage('Run Selenium Tests') {
            steps {
                script {
                    echo "Executing Selenium test suite..."
                    
                    dir('selenium-tests') {
                        // Set environment variables for tests
                        withEnv([
                            "BASE_URL=${WEB_APP_URL}",
                            "HEADLESS=true",
                            "SCREENSHOTS_DIR=${WORKSPACE}/${SCREENSHOTS_DIR}",
                            "REPORTS_DIR=${WORKSPACE}/${REPORTS_DIR}"
                        ]) {
                            // Run test suite
                            sh '''
                                . ${WORKSPACE}/venv/bin/activate
                                python3 test_suite.py 2>&1 | tee ../logs/test-execution.log
                            '''
                        }
                        
                        // Check test results
                        sh '''
                            if [ -f test_results.json ]; then
                                echo "Test results file found"
                                cat test_results.json
                            else
                                echo "No test results file found"
                                exit 1
                            fi
                        '''
                    }
                }
            }
            
            post {
                always {
                    script {
                        // Archive test artifacts
                        archiveArtifacts(
                            artifacts: "${SCREENSHOTS_DIR}/**/*, ${REPORTS_DIR}/**/*, logs/**/*, selenium-tests/test_results.json",
                            allowEmptyArchive: true
                        )
                    }
                }
            }
        }
        
        stage('Docker Testing') {
            steps {
                script {
                    echo "Running tests in Docker container..."
                    
                    // Build Docker image for testing
                    sh '''
                        docker build -t ${DOCKER_IMAGE} -f docker/Dockerfile .
                    '''
                    
                    // Run tests in Docker container
                    sh '''
                        docker run --rm \
                            --name ${DOCKER_CONTAINER} \
                            --network host \
                            -v ${WORKSPACE}/${SCREENSHOTS_DIR}:/app/screenshots \
                            -v ${WORKSPACE}/${REPORTS_DIR}:/app/reports \
                            -e BASE_URL=${WEB_APP_URL} \
                            -e HEADLESS=true \
                            ${DOCKER_IMAGE}
                    '''
                }
            }
        }
        
        stage('Performance Testing') {
            steps {
                script {
                    echo "Running performance tests..."
                    
                    dir('selenium-tests') {
                        withEnv([
                            "BASE_URL=${WEB_APP_URL}",
                            "PERFORMANCE_THRESHOLD=3.0"
                        ]) {
                            sh '''
                                source test-venv/bin/activate
                                python -c "
import time
import requests
import json

base_url = '${BASE_URL}'
threshold = float('${PERFORMANCE_THRESHOLD}')

# Test page load times
pages = ['', '/login', '/register', '/api/health']
results = {}

for page in pages:
    start_time = time.time()
    try:
        response = requests.get(f'{base_url}{page}', timeout=10)
        load_time = time.time() - start_time
        results[page] = {
            'load_time': load_time,
            'status_code': response.status_code,
            'success': load_time < threshold
        }
        print(f'Page {page}: {load_time:.2f}s (Status: {response.status_code})')
    except Exception as e:
        results[page] = {
            'load_time': None,
            'error': str(e),
            'success': False
        }
        print(f'Page {page}: Error - {e}')

# Save performance results
with open('../reports/performance_results.json', 'w') as f:
    json.dump(results, f, indent=2)

# Check if all tests passed
all_passed = all(r.get('success', False) for r in results.values())
if not all_passed:
    exit(1)
"
                            '''
                        }
                    }
                }
            }
        }
        
        stage('Generate Reports') {
            steps {
                script {
                    echo "Generating comprehensive test reports..."
                    
                    // Generate HTML report
                    sh '''
                        cat > ${REPORTS_DIR}/test_report.html << 'EOF'
<!DOCTYPE html>
<html>
<head>
    <title>DevOps Assignment 3 - Test Report</title>
    <style>
        body { font-family: Arial, sans-serif; margin: 20px; }
        .header { background: #f0f0f0; padding: 20px; border-radius: 5px; }
        .summary { margin: 20px 0; }
        .test-result { margin: 10px 0; padding: 10px; border-radius: 5px; }
        .pass { background: #d4edda; border: 1px solid #c3e6cb; }
        .fail { background: #f8d7da; border: 1px solid #f5c6cb; }
        .screenshot { max-width: 300px; margin: 10px; }
    </style>
</head>
<body>
    <div class="header">
        <h1>DevOps Assignment 3 - Test Report</h1>
        <p><strong>Build:</strong> ${BUILD_NUMBER}</p>
        <p><strong>Build URL:</strong> <a href="${BUILD_URL}">${BUILD_URL}</a></p>
        <p><strong>Timestamp:</strong> ${new Date().toISOString()}</p>
    </div>
    
    <div class="summary">
        <h2>Test Summary</h2>
        <p>This report contains the results of automated Selenium tests for the DevOps Assignment 3 web application.</p>
    </div>
    
    <div id="test-results">
        <!-- Test results will be populated here -->
    </div>
</body>
</html>
EOF
                    '''
                    
                    // Generate JSON summary
                    sh '''
                        cat > ${REPORTS_DIR}/summary.json << EOF
{
    "build_number": "${BUILD_NUMBER}",
    "build_url": "${BUILD_URL}",
    "timestamp": "$(date -u +%Y-%m-%dT%H:%M:%SZ)",
    "pipeline_status": "${currentBuild.result}",
    "test_suite": "DevOps Assignment 3",
    "total_tests": 14,
    "test_categories": [
        "Page Load Verification",
        "User Registration",
        "User Login",
        "Navigation",
        "Form Validation",
        "Database Operations",
        "Logout Functionality",
        "Error Messages",
        "UI Elements",
        "Responsive Design",
        "API Endpoints",
        "Performance Testing"
    ]
}
EOF
                    '''
                    
                    echo "Reports generated successfully"
                }
            }
        }
        
        stage('Cleanup') {
            steps {
                script {
                    echo "Cleaning up test environment..."
                    
                    // Stop web application with better logging
                    sh '''
                        echo "Stopping Flask web application..."
                        if [ -f web-app.pid ]; then
                            PID=$(cat web-app.pid)
                            echo "Killing Flask app process $PID"
                            kill $PID 2>/dev/null || true
                            sleep 2
                            if ps -p $PID > /dev/null 2>&1; then
                                echo "Force killing Flask app process $PID"
                                kill -9 $PID 2>/dev/null || true
                            fi
                            rm web-app.pid
                            echo "Flask app stopped"
                        else
                            echo "No PID file found for Flask app"
                        fi
                        
                        # Also check for any remaining Python processes running app.py
                        echo "Checking for any remaining Flask processes..."
                        pkill -f "python3 app.py" 2>/dev/null || true
                    '''
                    
                    // Clean up Docker containers
                    sh '''
                        echo "Cleaning up Docker containers..."
                        docker stop ${DOCKER_CONTAINER} 2>/dev/null || true
                        docker rm ${DOCKER_CONTAINER} 2>/dev/null || true
                    '''
                    
                    // Clean up temporary files
                    sh '''
                        echo "Cleaning up temporary files..."
                        rm -rf selenium-tests/test-venv 2>/dev/null || true
                        rm -rf web-app/venv 2>/dev/null || true
                    '''
                    
                    echo "Cleanup completed"
                }
            }
        }
    }
    
    post {
        always {
            script {
                // Always stop Flask app if it's running
                sh '''
                    echo "Post-build cleanup: Stopping Flask app..."
                    if [ -f web-app.pid ]; then
                        PID=$(cat web-app.pid)
                        echo "Killing Flask app process $PID"
                        kill $PID 2>/dev/null || true
                        rm web-app.pid
                    fi
                    pkill -f "python3 app.py" 2>/dev/null || true
                '''
                
                // Always archive artifacts
                archiveArtifacts(
                    artifacts: "${SCREENSHOTS_DIR}/**/*, ${REPORTS_DIR}/**/*, logs/**/*",
                    allowEmptyArchive: true
                )
                
                // Record build information
                currentBuild.description = "DevOps Assignment 3 - Build ${BUILD_NUMBER}"
                
                echo "Pipeline execution completed"
            }
        }
        
        success {
            script {
                echo "Pipeline completed successfully!"
                
                // Send success notification
                emailext(
                    subject: "${EMAIL_SUBJECT} - SUCCESS",
                    body: """
                    <h2>DevOps Assignment 3 - Test Suite PASSED</h2>
                    <p><strong>Build Number:</strong> ${BUILD_NUMBER}</p>
                    <p><strong>Build URL:</strong> <a href="${BUILD_URL}">${BUILD_URL}</a></p>
                    <p><strong>Duration:</strong> ${currentBuild.durationString}</p>
                    <p><strong>Test Results:</strong> All tests passed successfully</p>
                    <p><strong>Screenshots:</strong> Available in build artifacts</p>
                    <p><strong>Reports:</strong> Available in build artifacts</p>
                    """,
                    to: "${EMAIL_RECIPIENTS}",
                    mimeType: 'text/html'
                )
            }
        }
        
        failure {
            script {
                echo "Pipeline failed!"
                
                // Send failure notification
                emailext(
                    subject: "${EMAIL_SUBJECT} - FAILED",
                    body: """
                    <h2>DevOps Assignment 3 - Test Suite FAILED</h2>
                    <p><strong>Build Number:</strong> ${BUILD_NUMBER}</p>
                    <p><strong>Build URL:</strong> <a href="${BUILD_URL}">${BUILD_URL}</a></p>
                    <p><strong>Duration:</strong> ${currentBuild.durationString}</p>
                    <p><strong>Failure Stage:</strong> ${currentBuild.description}</p>
                    <p><strong>Console Output:</strong> <a href="${BUILD_URL}console">View Console</a></p>
                    <p><strong>Test Results:</strong> Check build artifacts for details</p>
                    """,
                    to: "${EMAIL_RECIPIENTS}",
                    mimeType: 'text/html'
                )
            }
        }
        
        unstable {
            script {
                echo "Pipeline is unstable!"
                
                // Send unstable notification
                emailext(
                    subject: "${EMAIL_SUBJECT} - UNSTABLE",
                    body: """
                    <h2>DevOps Assignment 3 - Test Suite UNSTABLE</h2>
                    <p><strong>Build Number:</strong> ${BUILD_NUMBER}</p>
                    <p><strong>Build URL:</strong> <a href="${BUILD_URL}">${BUILD_URL}</a></p>
                    <p><strong>Duration:</strong> ${currentBuild.durationString}</p>
                    <p><strong>Status:</strong> Some tests failed or were unstable</p>
                    <p><strong>Test Results:</strong> Check build artifacts for details</p>
                    """,
                    to: "${EMAIL_RECIPIENTS}",
                    mimeType: 'text/html'
                )
            }
        }
    }
} 